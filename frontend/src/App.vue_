fileName: App.vue
---
<template>
    <v-app>
        <v-main>
        </v-main>
    </v-app>
</template>

<script>
    export default {
        name: "App",
        data: () => ({
            useComponent: "",
            drawer: true,
            components: [],
            sideBar: true,
            urlPath: null,
            flipped: [],
            ImageUrl: '{{#if options.rootModel.uiStyle.logoImage}}{{{options.rootModel.uiStyle.logoImage.url}}}{{/if}}',
            aggregate: [
                {{#aggregates}}
                { 
                    title: '{{#ifNotNull displayName namePascalCase}}{{/ifNotNull}}', 
                    description: '{{description}}', 
                    key: '{{namePlural}}', 
                    route: '/{{boundedContext.namePlural}}/{{namePlural}}',
                    ImageUrl: '{{#if options.rootModel.uiStyle.logoImage}}{{{options.rootModel.uiStyle.logoImage.url}}}{{/if}}',
                },
                {{/aggregates}}
            ],
            {{#if (isSelectedSecurity options.rootModel.toppingPlatforms)}}
            username: '',
            {{else}}
            {{/if}}
        }),
        
        async created() {
        var path = document.location.href.split("#/")
        this.urlPath = path[1];

        {{#if (isSelectedSecurity options.rootModel.toppingPlatforms)}}
        var me = this
        me.username = me.$OAuth.idTokenParsed.preferred_username

        if(!me.username){
            location.reload()
        }
        {{else}}
        {{/if}}
        },
        watch: {
            cards(newCards) {
                this.flipped = new Array(newCards.length).fill(false);
            },
        },

        mounted() {
            var me = this;
            me.components = this.$ManagerLists;
        },

        methods: {
            openSideBar(){
                this.sideBar = !this.sideBar
            },
            changeUrl() {
                var path = document.location.href.split("#/")
                this.urlPath = path[1];
                this.flipped.fill(false);
            },
            goHome() {
                this.urlPath = null;
            },
            flipCard(index) {
                this.$set(this.flipped, index, true);
            },
            unflipCard(index) {
                this.$set(this.flipped, index, false);
            },
            {{#if (isSelectedSecurity options.rootModel.toppingPlatforms)}}
            logout(){
                //const keycloak = new Keycloak();

                //keycloak.logout;
                if(confirm("로그아웃 하시겠습니까?")){
                    localStorage.clear()
                    location.href = 'http://localhost:9090/realms/master/protocol/openid-connect/logout'
                }
            },
            {{else}}
            {{/if}}
        }
    };
</script>

<style>
</style>

<function>
window.$HandleBars.registerHelper('ifNotNull', function (displayName, name) {
    if(displayName){
        return displayName;
    }else{
        return name;
    }
})
window.$HandleBars.registerHelper('isSelectedSecurity', function (toppingPlatforms) {
    var selectedSecurity = false;
    try{
        for(var i=0; i<toppingPlatforms.length; i++){
            if(toppingPlatforms[i] == "keycloak-security" || toppingPlatforms[i] == "spring-security"){
                selectedSecurity =  true;
            }
        }

        return selectedSecurity;

    } catch(e){
        console.log(e)
    }
});
</function>
